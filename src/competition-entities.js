/**
 * Defines the type of Competition allowed in our system.
 * It's used as an input to fetch a {@link Competition} from third party data sources
 * and persist it in our local database
 */
class CompetitionInput {

    /**     
     * @param {String} id autogenerated identifier
     * @param {String} type the type of a competition (can be an enum) eg: FOOTBALL
     * @param {String} code identification of a competition eg: WORLD_CUP
     * @param {Number} apiId the identifier from a third party API
     * @param {Number} season the season of the competition
     */
    constructor(id, type, code, apiId, season) {
        this.id = id;
        this.type = type;
        this.code = code;
        this.apiId = apiId;
        this.season = season;
    }

    /**
     * @returns the resource identifier of a competition, used by clients to show the 
     * name of the competition in the UI
     */
    competitionName() {
        return `${this.type.toLocaleLowerCase()}_${this.code.toLocaleLowerCase}`;
    }
}

/**
 * A group of {@link Confrontation} organized by {@link Round}s
 * 
 * An example of Competition can be:
 * - World Cup 2022
 * - UFC 2022
 * - Big Brother 2018
 * - President Election 2016
 */
class Competition {

    /**     
     * @param {String} id autogenerated identifier
     * @param {Date} startAt when it starts
     * @param {Date} endAt when it finishes 
     * @param {Int} currentRound which round is now
     * @param {Array<String>} rounds how many rounds it has until today
     * @param {Array<Confrontation>} confrontations all confrontations available for this competition
     * @param {String} logo the image from the third party API used to download the file
     * @param {Number} season the season of the competition
     */
    constructor(id, startAt, endAt, currentRound, confrontations, rounds, season) {
        this.id = id;
        this.startAt = startAt;
        this.endAt = endAt;
        this.currentRound = currentRound;
        this.confrontations = confrontations;
        this.rounds = rounds;
        this.season = season;
    }

    /**
     * 
     * @param {String} url converts the URL into a file name, used to be downloaded
     */
    fileName() {

    }
}

/**
 * A round is a group of {@link Confrontation}s that will happens in a specific date
 * 
 * An example of Round can be:
 * - The first round of the World Cup
 * - A BBB elimination event
 * - A fight night in the UFC
 * - The first turn for president elections
 */
class Round {
    constructor(description, startDate, index) {
        this.description = description;
        this.startDate = startDate;
        this.index = index;
    }
}

/**
 * A event where two or more opponents will face each other.
 * It contains a contests group that holds all possible bets for this confrontation
 * 
 * An example of confrontation can be:
 * - A match between two teams in the World Cup
 * - A F1 race
 * - A fight between two athletes
 */
class Confrontation {

    /**     
     * @param {String} id autogenerated id
     * @param {Date} startAt when the confrontation should start
     * @param {Date} allowBetsUntil until when the bets are allowed    
     * @param {String} round the corresponding round for this confrontation
     * @param {String} group the group related to this 
     * @param {Number} expectedDuration how long it should take
     * @param {Object} contest what can be bet in this competition
     */
    constructor(id, startAt, allowBetsUntil, round, expectedDuration, contest) {
        this.id = id;
        this.startAt = startAt;
        this.allowBetsUntil = allowBetsUntil;
        this.round = round;
        this.expectedDuration = expectedDuration;
        this.contests = contest;
    }
}

module.exports = {
    CompetitionInput,
    Competition,
    Confrontation
}